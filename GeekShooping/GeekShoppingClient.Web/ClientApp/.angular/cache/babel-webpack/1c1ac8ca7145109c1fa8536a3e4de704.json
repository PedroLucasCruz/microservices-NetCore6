{"ast":null,"code":"import { HttpErrorResponse } from '@angular/common/http';\nimport { throwError } from \"rxjs\";\nimport { catchError } from \"rxjs/operators\";\nimport { LocalStorageUtils } from 'src/app/utils/local-storage';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\"; // import { LoaderService } from '../shared/loader/services/loader.service';\n// import { JwtService } from './jwt/jwt.service';\n\nexport let ErrorInterceptor = /*#__PURE__*/(() => {\n  class ErrorInterceptor {\n    constructor(router) {\n      this.router = router;\n      this.localStorageUtil = new LocalStorageUtils();\n    }\n\n    intercept(req, next) {\n      // this.loaderService.show();\n      return next.handle(req).pipe(catchError(error => {\n        if (error instanceof HttpErrorResponse) {\n          //  finalize(() => this.loaderService.hide());\n          // this.loaderService.hide();\n          if (error.status === 401) {\n            this.localStorageUtil.limparDadosLocaisUsuario();\n          }\n\n          if (error.status === 403) {\n            this.router.navigate(['/acesso-negado']);\n          }\n        }\n\n        return throwError(error);\n      }));\n    }\n\n  }\n\n  ErrorInterceptor.ɵfac = function ErrorInterceptor_Factory(t) {\n    return new (t || ErrorInterceptor)(i0.ɵɵinject(i1.Router));\n  };\n\n  ErrorInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ErrorInterceptor,\n    factory: ErrorInterceptor.ɵfac\n  });\n  return ErrorInterceptor;\n})();","map":null,"metadata":{},"sourceType":"module"}